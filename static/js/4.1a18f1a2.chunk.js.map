{"version":3,"sources":["views/Login/Login.js"],"names":["Login","useState","email","setEmail","password","setPassword","dispatch","useDispatch","isLogged","useSelector","authSelectors","getIsLoggedIn","handleChange","target","name","value","sx","mt","display","justifyContent","maxWidth","onSubmit","e","preventDefault","authOperations","login","type","label","onChange","variant","width"],"mappings":"6OAuFeA,UA/ED,WACZ,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACMC,EAAWC,cACXC,EAAWC,YAAYC,IAAcC,eAOrCC,EAAe,SAAC,GAAiC,IAAD,IAA9BC,OAAUC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MACtC,OAAQD,GACN,IAAK,QACH,OAAOX,EAASY,GAClB,IAAK,WACH,OAAOV,EAAYU,GACrB,QACE,SAcN,OACE,cAAC,IAAD,CACEC,GAAI,CACFC,GAAI,EACJC,QAAS,OACTC,eAAgB,UAJpB,UAOIX,GACA,cAAC,IAAD,CAAWQ,GAAI,CAAEI,SAAU,KAA3B,SACE,uBAAMC,SApBO,SAACC,GACpBA,EAAEC,iBAEY,KAAVrB,GAA6B,KAAbE,GAClBE,EAASkB,IAAeC,MAAM,CAAEvB,QAAOE,cAnBzCD,EAAS,IACTE,EAAY,KAkCN,UACE,cAAC,IAAD,CACES,KAAK,QACLY,KAAK,QACLC,MAAM,QACNZ,MAAOb,EACP0B,SAAUhB,EACViB,QAAQ,WACRb,GAAI,CAAEc,MAAO,KAGf,cAAC,IAAD,CACEhB,KAAK,WACLY,KAAK,WACLC,MAAM,WACNZ,MAAOX,EACPwB,SAAUhB,EACViB,QAAQ,WACRb,GAAI,CAAEc,MAAO,KAEf,cAAC,IAAD,CACEJ,KAAK,SACLL,SAAU,SAACC,GACTA,EAAEC,kBAEJM,QAAQ,YACRb,GAAI,CAAEC,GAAI,GANZ","file":"static/js/4.1a18f1a2.chunk.js","sourcesContent":["import { Button, Container, FormGroup, TextField } from \"@mui/material\";\n// import { maxWidth } from \"@mui/system\";\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport authOperations from \"../../redux/auth/auth-operations\";\nimport authSelectors from \"../../redux/auth/auth-selectors\";\n\nconst Login = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const dispatch = useDispatch();\n  const isLogged = useSelector(authSelectors.getIsLoggedIn);\n\n  const reset = () => {\n    setEmail(\"\");\n    setPassword(\"\");\n  };\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case \"email\":\n        return setEmail(value);\n      case \"password\":\n        return setPassword(value);\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (email !== \"\" && password !== \"\") {\n      dispatch(authOperations.login({ email, password }));\n    }\n\n    reset();\n  };\n\n  return (\n    <Container\n      sx={{\n        mt: 2,\n        display: \"flex\",\n        justifyContent: \"center\",\n      }}\n    >\n      {!isLogged && (\n        <FormGroup sx={{ maxWidth: 350 }}>\n          <form onSubmit={handleSubmit}>\n            <TextField\n              name=\"email\"\n              type=\"email\"\n              label=\"Email\"\n              value={email}\n              onChange={handleChange}\n              variant=\"standard\"\n              sx={{ width: 1 }}\n            />\n\n            <TextField\n              name=\"password\"\n              type=\"password\"\n              label=\"Password\"\n              value={password}\n              onChange={handleChange}\n              variant=\"standard\"\n              sx={{ width: 1 }}\n            />\n            <Button\n              type=\"submit\"\n              onSubmit={(e) => {\n                e.preventDefault();\n              }}\n              variant=\"contained\"\n              sx={{ mt: 2 }}\n            >\n              Login\n            </Button>\n          </form>\n        </FormGroup>\n      )}\n    </Container>\n  );\n};\n\nexport default Login;\n"],"sourceRoot":""}